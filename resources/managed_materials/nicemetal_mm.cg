 // vertex shader main entry
void main_nicemetal_vp(
                       float2 uv : TEXCOORD0,
                        float4 position : POSITION, 
                        float3 normal   : NORMAL,
                        float4 cols     : COLOR,
                        uniform float4 lightPosition,
                        uniform float3 eyePosition,
                        uniform float4x4 worldviewproj,
            
                        out float4 oClipPos : POSITION,
                        out float4 oCols : COLOR,
                        out float4 oPos : TEXCOORD0,
                        out float3 oNorm    : TEXCOORD1,
                        out float4 oLightPos    : TEXCOORD2,            
                        out float3 oEyePos  : TEXCOORD3,
                        out float2 oUv     : TEXCOORD4
             ) 
{ 
    oClipPos = mul(worldviewproj, position);
    
    oPos = position;
    oNorm     = normal; 
    oLightPos = lightPosition;
    oEyePos = eyePosition;
    oCols=cols;
    oUv = uv;
} 

void main_nicemetal_fp(
            float4 pos      : TEXCOORD0,
            float4 incol    : COLOR,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            uniform sampler2D Dmg_Diffuse_Map: register(s2),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv)*(1-incol.a);
    textColour=textColour+tex2D(Dmg_Diffuse_Map, uv)*incol.a;
    textColour=textColour*(1-incol.b/3);
    float4 specColour = tex2D(Specular_Map, uv)+incol.b/3-incol.a/2;
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
    oColor.a=1;
}

void main_nicemetal_transp_fp(
            float4 pos      : TEXCOORD0,
            float4 incol    : COLOR,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            uniform sampler2D Dmg_Diffuse_Map: register(s2),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv)*(1-incol.a);
    textColour=textColour+tex2D(Dmg_Diffuse_Map, uv)*incol.a;
    textColour=textColour*(1-incol.b/3);
    float4 specColour = tex2D(Specular_Map, uv)+incol.b/3-incol.a/2;
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
    oColor.a=tex2D(Diffuse_Map, uv).a;
}

void main_nicemetal_fp_nodmg(
            float4 pos      : TEXCOORD0,
            float4 incol    : COLOR,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv);
    textColour=textColour*(1-incol.b/3);
    float4 specColour = tex2D(Specular_Map, uv)+incol.b/3-incol.a/2;
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
  oColor.a=1;
}

void main_nicemetal_transp_fp_nodmg(
            float4 pos      : TEXCOORD0,
            float4 incol    : COLOR,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv);
    textColour=textColour*(1-incol.b/3);
    float4 specColour = tex2D(Specular_Map, uv)+incol.b/3-incol.a/2;
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
    oColor.a=tex2D(Diffuse_Map, uv).a;
}

void reflect_nicemetal_vp(
         float4   position         : POSITION,
         float3   normal         : NORMAL,
         float2 uv : TEXCOORD0,
         float4 cols     : COLOR,

   out      float4   oPosition         : POSITION,
   out      float2   oUv         : TEXCOORD0,
   out      float3   oViewDirection      : TEXCOORD1,
   out      float3   oNormal         : TEXCOORD2,
   out         float4 ocols     : COLOR,

   uniform   float3   camPosition,
   uniform   float4x4   world,
   uniform   float4x4   worldViewProj)
{
	oUv=uv;
	ocols=cols;
   oPosition = mul(worldViewProj, position);
   oNormal = mul((float3x3)world, normal);
   oViewDirection = mul((float3x3)world, position.xyz - camPosition);
} 

void reflect_nicemetal_fp(
       float2 uv       : TEXCOORD0,
       float3   viewDirection   : TEXCOORD1,
       float3   normal      : TEXCOORD2,
       float4 incol    : COLOR,

   out      float4   oColor      : COLOR,

   uniform sampler2D Specular_Map: register(s0),
   uniform   samplerCUBE   cubeMap: register(s1))
{
   float3 N = normalize(normal);
   float3 R = reflect(viewDirection, N);
   R.z = -R.z;   // <-- should not have to do this?

   float4 reflectedColor = texCUBE(cubeMap, R);
   float4 emissiveColor = tex2D(Specular_Map, uv)+incol.b/3-incol.a/2;

   oColor = reflectedColor*emissiveColor;
   oColor.a=1;
} 

void reflect_nicemetal_nocolor_fp(
       float2 uv       : TEXCOORD0,
       float3   viewDirection   : TEXCOORD1,
       float3   normal      : TEXCOORD2,

   out      float4   oColor      : COLOR,

   uniform sampler2D Specular_Map: register(s0),
   uniform   samplerCUBE   cubeMap: register(s1))
{
   float3 N = normalize(normal);
   float3 R = reflect(viewDirection, N);
   R.z = -R.z;   // <-- should not have to do this?

   float4 reflectedColor = texCUBE(cubeMap, R);
   float4 emissiveColor = tex2D(Specular_Map, uv);

   oColor = reflectedColor*emissiveColor;
   oColor.a=1;
} 


void main_simplemetal_fp(
            float4 pos      : TEXCOORD0,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv);
    float4 specColour = tex2D(Specular_Map, uv);
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
    oColor.a=1;
}

void main_simplemetal_transp_fp(
            float4 pos      : TEXCOORD0,
            float3 normal       : TEXCOORD1, 
            float4 lightpos     : TEXCOORD2,
            float3 eyepos       : TEXCOORD3,
            float2 uv       : TEXCOORD4,
            uniform float4 lightDiffuse,
            uniform float4 lightSpecular,
            uniform float exponent,
            uniform float4 ambient,
            
            uniform sampler2D Diffuse_Map: register(s0),
            uniform sampler2D Specular_Map: register(s1),
            out float4 oColor : COLOR 
) 
{
    float3 N = normalize(normal);
    float3 EyeDir = normalize(eyepos - pos.xyz);
    float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w).xyz);
    float3 HalfAngle = normalize(LightDir + EyeDir);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL,NdotH,exponent);
    float4 textColour = tex2D(Diffuse_Map, uv);
    float4 specColour = tex2D(Specular_Map, uv);
//    oColor = lightDiffuse * textColour * Lit.y + lightSpecular * specColour * Lit.z + textColour*ambient;
    oColor = lerp(lightDiffuse * textColour * Lit.y + textColour*ambient, lightSpecular * Lit.z, specColour);
    oColor.a=tex2D(Diffuse_Map, uv).a;
}
