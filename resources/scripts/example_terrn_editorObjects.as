// NEW API `game.getEditorObjects()` test
// ===================================================

// Window [X] button handler
#include "imgui_utils.as"
imgui_utils::CloseWindowPrompt closeBtnHandler;

void drawEditorObjectLine(array<TerrainEditorObjectClassPtr@>@ ediObjects, uint i)
{
    ImGui::PushID(i); // important - otherwise "destroy" button will interfere between objects, deleting multiple!
    
    TerrainEditorObjectClass@ curObj = ediObjects[i];
    ImGui::TextDisabled("["+i+"/"+ediObjects.length()+"]");
    ImGui::SameLine();
    ImGui::Text(curObj.getName());
    ImGui::SameLine();ImGui::TextDisabled(",");ImGui::SameLine();
    ImGui::Text(curObj.getType()!="" ?curObj.getType(): "~");
    ImGui::SameLine();ImGui::TextDisabled(",");ImGui::SameLine();
    ImGui::Text('"'+curObj.getInstanceName()+'"');
    ImGui::SameLine();
    if (ImGui::SmallButton("destroy"))
    {
        game.destroyObject(curObj.getInstanceName());
    }
    
    ImGui::PopID();  // i
}

void frameStep(float dt)
{
    // Begin drawing window
    if (ImGui::Begin("Terrain Editor Objects", closeBtnHandler.windowOpen, 0))
    {
        // Draw the "Terminate this script?" prompt on the top (if not disabled by config).
        closeBtnHandler.draw();
        
        // Header
        ImGui::TextDisabled("Enumerates all terrain objects using new API `game.getEditorObjects()`.");
        ImGui::TextDisabled("Also deletes objects via `game.destroyObject()` using autogenerated names.");
        ImGui::Text("Object count: " + game.getEditorObjects().length());
        ImGui::Separator();
        
        // Draw all instances
        array<TerrainEditorObjectClassPtr@>@ ediObjects = game.getEditorObjects();
        for (uint i = 0; i < ediObjects.length(); i++)
        {
            drawEditorObjectLine(ediObjects, i);
        }
        
        // End drawing window
        ImGui::End();
    }
}

