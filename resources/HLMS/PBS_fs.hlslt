#pragma target 3.0
#define ROUGHNESS_BIAS 0.005

struct stdIn
{
	float4 position_cs : POSITION;
	float4 position_es : TEXCOORD0;
	float3 normal_es : TEXCOORD1;
	float3 tangent_es : TEXCOORD2;
	float2 mainUv : TEXCOORD3;
	float2 d1Uv : TEXCOORD4;
	float2 d2Uv : TEXCOORD5;
};

// ---------------------------------
// Uniforms
// ---------------------------------
@property( lights_count )
	uniform float4 lightPositions_es[@value(lights_count)];
	uniform float4 lightDirections_es[@value(lights_count)];
	uniform float4 lightColors[@value(lights_count)];
	uniform float4 lightParameters[@value(lights_count)];
@end

@property( map_environment )
	uniform samplerCUBE in_map_environment : register(s@value(map_environment_register));
	uniform float in_map_environment_intensity;
	uniform float in_map_environment_mipmapcount;
@end

uniform float4x4 ivMat;

uniform float3 in_albedo;
uniform float3 in_f0;
uniform float in_roughness;
uniform float in_light_roughness_offset;

uniform float2 in_offset_main;
uniform float2 in_scale_main;
uniform float2 in_offset_d1;
uniform float2 in_scale_d1;
uniform float2 in_offset_d2;
uniform float2 in_scale_d2;

 // main maps
@property( map_main_albedo )
	uniform sampler2D in_map_main_albedo : register(s@value(map_main_albedo_register));
	uniform float in_blendfactor1_main_albedo;
@end
@property( map_main_normalr )
	uniform sampler2D in_map_main_normalr : register(s@value(map_main_normalr_register));
	uniform float in_blendfactor1_main_normalr;
	uniform float in_blendfactor2_main_normalr;
@end
@property( map_main_f0 )
	uniform sampler2D in_map_main_f0 : register(s@value(map_main_f0_register));
	uniform float in_blendfactor1_main_f0;
@end


 // detail maps 1
@property( map_d1_albedo )
	uniform sampler2D in_map_d1_albedo : register(s@value(map_d1_albedo_register));
	uniform float in_blendfactor1_d1_albedo;
@end
@property( map_d1_normalr )
	uniform sampler2D in_map_d1_normalr : register(s@value(map_d1_normalr_register));
	uniform float in_blendfactor1_d1_normalr;
	uniform float in_blendfactor2_d1_normalr;
@end
@property( map_d1_f0 )
	uniform sampler2D in_map_d1_f0 : register(s@value(map_d1_f0_register));
	uniform float in_blendfactor1_d1_f0;
@end


 // detail maps 2
@property( map_d2_albedo )
	uniform sampler2D in_map_d2_albedo : register(s@value(map_d2_albedo_register));
	uniform float in_blendfactor1_d2_albedo;
@end
@property( map_d2_normalr )
	uniform sampler2D in_map_d2_normalr : register(s@value(map_d2_normalr_register));
	uniform float in_blendfactor1_d2_normalr;
	uniform float in_blendfactor2_d2_normalr;
@end
@property( map_d2_f0 )
	uniform sampler2D in_map_d2_f0 : register(s@value(map_d2_f0_register));
	uniform float in_blendfactor1_d2_f0;
@end


// ---------------------------------
// Pysicaly base shading functins
// ---------------------------------

// geometricShadowing / (4 * NoL * NoV)
float visibilityTermGgx(float NoV, float NoL, float a2)
{
    float G_V = NoV + sqrt( (NoV - NoV * a2) * NoV + a2 );
    float G_L = NoL + sqrt( (NoL - NoL * a2) * NoL + a2 );
    return 1.0 / (G_V * G_L);
}

float3 microfacetBRDF_GGX( float NoV, float NoL, float NoH, float VoH, float3 halfVec, float3 tangent, float3 binormal, float3 alpha, float3 alpha2 , float3 f0)
{
	// D
	float denom, D;
	if(length(tangent) > 0.5)
	{
		// Anisotropic GGX Distribution
		float ToH = dot( tangent, halfVec);
		float BoH = dot( binormal, halfVec);
		denom = (ToH * ToH) / alpha2.x + (BoH * BoH) / alpha2.y + NoH * NoH;
		D = 1.0 / (alpha.x * alpha.y * denom * denom);
	}
	else
	{
		// if the tangent is 0 use the
		// isotropic GGX Distribution
		denom = NoH * NoH * (alpha2.z - 1.0) + 1.0;
		D = alpha2.z / (denom * denom);
	}
	
	// F
	float3 F = f0 + (1.0 - f0) * pow( 1.0 - VoH, 5.0 );

	// Vis
	float vis = visibilityTermGgx(NoV, NoL, alpha2.z);

    return D * F * vis;
}

float3 diffuseBRDF_Disney(float NoV, float NoL, float NoH, float VoH, float roughness, float3 f0)
{
    float Fd90 = 0.5 + 2.0 * roughness * VoH * VoH;
    float3 invF0 = float3(1.0, 1.0, 1.0) - f0;
    float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - NoL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - NoV, 5.0 ))) * dim;
    return float3(result, result, result);
}

// ----------------------------------------------------------------------------------
// Blend functions
// ----------------------------------------------------------------------------------

@insertpiece( BlendFunctions )

// ----------------------------------------------------------------------------------
// Main function
// ----------------------------------------------------------------------------------

void main(in stdIn IN, out float4 oColour : COLOR)
{
	float4 albedoColor = float4(in_albedo, 0.0);
	float3 normal_es = normalize( IN.normal_es );
	float3 tangent_es = normalize( IN.tangent_es );
	float3 binormal_es = cross( tangent_es, normal_es );
	float3 f0 = in_f0;
	float2 roughness = float2(in_roughness, in_roughness);
	
	// ---------------------------------
	// Albedo texture
	// ---------------------------------
	@property( map_main_albedo || map_d1_albedo || map_d2_albedo )
		float4 tmp_albedo;
	@end
	@property( map_main_albedo )
		tmp_albedo = tex2D( in_map_main_albedo, IN.mainUv * in_scale_main + in_offset_main );
		@property( !hw_gamma_read )
			// Do the gamma correction if no hardware gamma correction is supported
			tmp_albedo *= tmp_albedo;
		@end
		albedoColor = blendFunc@value(blendFunc_main_albedo)(albedoColor, tmp_albedo, in_blendfactor1_main_albedo);
	@end
	@property( map_d1_albedo )
		tmp_albedo = tex2D( in_map_d1_albedo, IN.d1Uv * in_scale_d1 + in_offset_d1 );
		@property( !hw_gamma_read )
			// Do the gamma correction if no hardware gamma correction is supported
			tmp_albedo *= tmp_albedo;
		@end
		albedoColor = blendFunc@value(blendFunc_d1_albedo)(albedoColor, tmp_albedo, in_blendfactor1_d1_albedo);
	@end
	@property( map_d2_albedo )
		tmp_albedo = tex2D( in_map_d2_albedo, IN.d2Uv * in_scale_d2 + in_offset_d2 );
		@property( !hw_gamma_read )
			// Do the gamma correction if no hardware gamma correction is supported
			tmp_albedo *= tmp_albedo;
		@end
		albedoColor = blendFunc@value(blendFunc_d2_albedo)(albedoColor, tmp_albedo, in_blendfactor1_d2_albedo);
	@end
	
	// ---------------------------------
	// Normal roughness mapping
	// ---------------------------------
	@property( map_main_normalr )
		float4 nr1 = tex2D( in_map_main_normalr, IN.mainUv * in_scale_main + in_offset_main );
		roughness += nr1.zw * in_blendfactor2_main_normalr;
	@end
	@property( map_d1_normalr )
		float4 nr2 = texture2D( in_map_d1_normalr, IN.d1Uv * in_scale_d1 + in_offset_d1 );
		roughness += nr2.zw * in_blendfactor2_d1_normalr;
	@end
	@property( map_d2_normalr )
		float4 nr3 = texture2D( in_map_d2_normalr, IN.d2Uv * in_scale_d2 + in_offset_d2 );
		roughness += nr3.zw * in_blendfactor2_d2_normalr;
	@end
	@property( map_main_normalr || map_d1_normalr || map_d2_normalr )
		// Calculate the TBN matrix
		if(length(IN.tangent_es) > 0.0)
		{
			float3x3 tbnMatrix = float3x3( tangent_es, binormal_es, normal_es );
			float3 normal_tbns = float3(0.0, 0.0, 0.0);
	@end
	@property( map_main_normalr )
			normal_tbns.xy += ( nr1.xy - 0.5 ) * 2.0 * in_blendfactor1_main_normalr;
	@end
	@property( map_d1_normal )
			normal_tbns.xy += ( nr2.xy - 0.5 ) * 2.0 * in_blendfactor1_d1_normalr;
	@end
	@property( map_d2_normal )
			normal_tbns.xy += ( nr3.xy - 0.5 ) * 2.0 * in_blendfactor1_d2_normalr;
	@end
	@property( map_main_normalr || map_d1_normalr || map_d2_normalr )
			normal_tbns.z = sqrt( max(1.0 - normal_tbns.x * normal_tbns.x - normal_tbns.y * normal_tbns.y, 0.0) );
			normal_es = mul(normalize(normal_tbns), tbnMatrix);
		}
		roughness = clamp(roughness, float2(0.0, 0.0), float2(1.0, 1.0));
	@end
	
	// ---------------------------------
	// F0 texture
	// ---------------------------------
	@property( map_main_f0 || map_d1_f0 || map_d2_f0 )
		float4 f0a;
		float4 f01 = float4(f0, 1.0);
	@end
	@property( map_main_f0 )
		f0a = tex2D( in_map_main_f0, IN.mainUv * in_scale_main + in_offset_main );
		f01 = blendFunc@value(blendFunc_main_f0)(f01, float4(f0a.rgb, 1.0) , in_blendfactor1_main_f0);
	@end
	@property( map_d1_f0 )
		f0a = tex2D( in_map_d1_f0, IN.d1Uv * in_scale_d1 + in_offset_d1 );
		f01 = blendFunc@value(blendFunc_d1_f0)(f01, float4(f0a.rgb, 1.0) , in_blendfactor1_d1_f0);
	@end
	@property( map_d2_f0 )
		f0a = tex2D( in_map_d2_f0, IN.d2Uv * in_scale_d2 + in_offset_d2 );
		f01 = blendFunc@value(blendFunc_d2_f0)(f01, float4(f0a.rgb, 1.0) , in_blendfactor1_d2_f0);
	@end
	@property( map_main_f0 || map_d1_f0 || map_d2_f0 )
		f0 = clamp(f01.rgb, float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0));
	@end

	// ---------------------------------
	// Pysicaly based shading
	// ---------------------------------
	// A Roughness of 0 causes a infinite small specular reflection which is not possible in reality so we add a small bias to it
    // Roughness^2 is because of a better experience on sliding between 0 and 1. Attention the cube texture look up is linear and without bias!
    float2 roughnessOffseted = roughness + in_light_roughness_offset;
    float2 roughnessBiasedXY = roughnessOffseted * roughnessOffseted * (1.0 - ROUGHNESS_BIAS) + ROUGHNESS_BIAS;
    float3 roughnessBiased = float3(roughnessBiasedXY.x, roughnessBiasedXY.y, length(roughnessBiasedXY));
	
	float3 finalColour = float3(0.0, 0.0, 0.0);
	float3 viewDir_es = -normalize(IN.position_es);
	float NoV = clamp( dot( normal_es, viewDir_es ), 0.0, 1.0 );
	float3 alpha = roughnessBiased * roughnessBiased;
	float3 alpha2 = alpha * alpha;
	
	// ---------------------------------
	// @value(lights_directional_count) x Directional light
	// ---------------------------------
	@foreach( n, lights_directional_start, lights_directional_count)
	{
		float3 lightDir_es = lightDirections_es[@n].xyz;

		float3 halfWay_es = normalize( lightDir_es + viewDir_es );
		float NoL = clamp( dot( normal_es, lightDir_es), 0.0, 1.0 );
		float NoH = clamp( dot( normal_es, halfWay_es ), 0.00001, 1.0 );
		float VoH = clamp( dot( viewDir_es, halfWay_es ), 0.00001, 1.0 );
		
		float3 fs = microfacetBRDF_GGX(NoV, NoL, NoH, VoH, halfWay_es, tangent_es, binormal_es, alpha, alpha2, f0);
		float3 fd = diffuseBRDF_Disney(NoV, NoL, NoH, VoH, roughnessBiased.z, f0);
		
		finalColour += (fd * albedoColor.xyz + fs) * lightColors[@n].xyz * NoL;
	}
	@end
	
	// In the next light equations the lightParameters are used. They are containing the following properties
	// lightParameters[n].x = attenuation
	// lightParameters[n].y = cos( spot_outer_angle / 2 )
	// lightParameters[n].z = spot_falloff

	// ---------------------------------
	// @value(lights_point_count) x Point light
	// ---------------------------------
	@foreach( n, lights_point_start, lights_point_count )
	{
		float3 lightDir_es = lightPositions_es[@n].xyz - IN.position_es.xyz;
		float distance = length( lightDir_es );
		lightDir_es /= distance;
	
		float atten = 1.0;
		if(lightParameters[@n].x < 1000000.0)
			atten = 1.0 - distance / lightParameters[@n].x;
	
		if(atten > 0.0)
		{
			float3 halfWay_es = normalize( lightDir_es + viewDir_es );
			float NoL = clamp( dot( normal_es, lightDir_es), 0.0, 1.0 );
			float NoH = clamp( dot( normal_es, halfWay_es ), 0.00001, 1.0 );
			float VoH = clamp( dot( viewDir_es, halfWay_es ), 0.00001, 1.0 );
		
			float3 fs = microfacetBRDF_GGX(NoV, NoL, NoH, VoH, halfWay_es, tangent_es, binormal_es, alpha, alpha2, f0);
			float3 fd = diffuseBRDF_Disney(NoV, NoL, NoH, VoH, roughnessBiased.z, f0);
		
			finalColour += (fd * albedoColor.xyz + fs) * lightColors[@n].xyz * NoL * atten;
		}
	}
	@end
	
	// ---------------------------------
	// @value(lights_spot_count) x Spot light
	// ---------------------------------
	@foreach( n, lights_spot_start, lights_spot_count )
	{
		float3 lightDir_es = lightPositions_es[@n].xyz - IN.position_es.xyz;
		float distance = length( lightDir_es );
		lightDir_es /= distance;
	
		float atten = 1.0;
		if(lightParameters[@n].x < 1000000.0)
			atten = 1.0 - distance / lightParameters[@n].x;
	
		if(atten > 0.0)
		{
			float spotEffect = dot( lightDirections_es[@n].xyz, lightDir_es );
			if ( spotEffect > lightParameters[@n].y )
			{
				spotEffect = pow(spotEffect, lightParameters[@n].z);
		
				float3 halfWay_es = normalize( lightDir_es + viewDir_es );
				float NoL = clamp( dot( normal_es, lightDir_es), 0.0, 1.0 );
				float NoH = clamp( dot( normal_es, halfWay_es ), 0.00001, 1.0 );
				float VoH = clamp( dot( viewDir_es, halfWay_es ), 0.00001, 1.0 );
			
				float3 fs = microfacetBRDF_GGX(NoV, NoL, NoH, VoH, halfWay_es, tangent_es, binormal_es, alpha, alpha2, f0);
				float3 fd = diffuseBRDF_Disney(NoV, NoL, NoH, VoH, roughnessBiased.z, f0);
			
				finalColour += (fd * albedoColor.xyz + fs) * lightColors[@n].xyz * NoL * atten * spotEffect;
			}
		}
	}
	@end
	
	// ---------------------------------
	// Environment Map
	// ---------------------------------
	@property( map_environment )
	{
		float3 reflDir_es = reflect( -viewDir_es, normal_es );
		float4 reflDir_ws_lod = mul(ivMat, float4(reflDir_es, 0.0));
		
		float r = length(roughness);
		float ro = r + in_light_roughness_offset;
		float rBiased = ro * ro * (1.0 - ROUGHNESS_BIAS) + ROUGHNESS_BIAS;

		reflDir_ws_lod.w = sqrt(r) * (in_map_environment_mipmapcount + 1.0);
 		float3 cubeColor = texCUBElod( in_map_environment, reflDir_ws_lod ).xyz;
		cubeColor *= cubeColor;
  		
 		reflDir_ws_lod.w = in_map_environment_mipmapcount - 1.0; // 2x2 pixel per face
 		float3 cubeColorGlobal = texCUBElod( in_map_environment, reflDir_ws_lod ).xyz;
		cubeColorGlobal *= cubeColorGlobal;
		
		float NoV = clamp(dot( normal_es, viewDir_es ), -1.0, 1.0);
		if(NoV < 0.0)
			NoV = -NoV * 0.2;
  		
		float NoL = NoV;
		float NoH = 1.0;
		float VoH = NoV;
		
		float3 fs = (f0 + (1.0 - f0) * pow( 1.0 - NoV, 5.0 ));
		float3 fd = diffuseBRDF_Disney(NoV, NoL, NoH, VoH, rBiased, f0);

		finalColour += (fd * albedoColor.xyz * cubeColorGlobal + fs * cubeColor) * NoL * in_map_environment_intensity;
	}
	@end

	// ---------------------------------
	// Bring the result to gamma space if hardware gamma write is disabled
	// ---------------------------------
	@property( !hw_gamma_write )
		finalColour = sqrt(finalColour);
	@end

	oColour = float4(finalColour.r, finalColour.g, finalColour.b, 1.0);
}
