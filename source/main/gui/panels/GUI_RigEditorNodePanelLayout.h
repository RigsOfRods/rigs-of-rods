#pragma once

// ----------------------------------------------------------------------------
// Generated by MyGUI's LayoutEditor using RoR's code templates.
// Find the templates at [repository]/tools/MyGUI_LayoutEditor/
//
// IMPORTANT:
// Do not modify this code directly. Create a derived class instead.
// ----------------------------------------------------------------------------

#include "ForwardDeclarations.h"
#include "BaseLayout.h"

namespace RoR
{

namespace GUI
{
	
ATTRIBUTE_CLASS_LAYOUT(RigEditorNodePanelLayout, "rig_editor_node_panel.layout");
class RigEditorNodePanelLayout : public wraps::BaseLayout
{

public:

	RigEditorNodePanelLayout(MyGUI::Widget* _parent = nullptr);
	virtual ~RigEditorNodePanelLayout();

protected:

	//%LE Widget_Declaration list start
	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_node_panel, "node_panel");
	MyGUI::Window* m_node_panel;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_node_name_label, "node_name_label");
	MyGUI::TextBox* m_node_name_label;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_node_name_editbox, "node_name_editbox");
	MyGUI::EditBox* m_node_name_editbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_m_checkbox, "flag_m_checkbox");
	MyGUI::Button* m_flag_m_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_l_checkbox, "flag_l_checkbox");
	MyGUI::Button* m_flag_l_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_p_checkbox, "flag_p_checkbox");
	MyGUI::Button* m_flag_p_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_b_checkbox, "flag_b_checkbox");
	MyGUI::Button* m_flag_b_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_h_checkbox, "flag_h_checkbox");
	MyGUI::Button* m_flag_h_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_c_checkbox, "flag_c_checkbox");
	MyGUI::Button* m_flag_c_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_y_checkbox, "flag_y_checkbox");
	MyGUI::Button* m_flag_y_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_x_checkbox, "flag_x_checkbox");
	MyGUI::Button* m_flag_x_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_f_checkbox, "flag_f_checkbox");
	MyGUI::Button* m_flag_f_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_L_checkbox, "flag_L_checkbox");
	MyGUI::Button* m_flag_L_checkbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_loadweight_label, "loadweight_label");
	MyGUI::TextBox* m_loadweight_label;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_loadweight_editbox, "loadweight_editbox");
	MyGUI::EditBox* m_loadweight_editbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_detacher_group_label, "detacher_group_label");
	MyGUI::TextBox* m_detacher_group_label;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_detacher_group_editbox, "detacher_group_editbox");
	MyGUI::EditBox* m_detacher_group_editbox;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_flag_tooltip_label, "flag_tooltip_label");
	MyGUI::TextBox* m_flag_tooltip_label;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_preset_selector_label, "preset_selector_label");
	MyGUI::TextBox* m_preset_selector_label;

	ATTRIBUTE_FIELD_WIDGET_NAME(RigEditorNodePanelLayout, m_preset_selector_combobox, "preset_selector_combobox");
	MyGUI::ComboBox* m_preset_selector_combobox;

	//%LE Widget_Declaration list end
};

} // namespace GUI

} // namespace RoR

