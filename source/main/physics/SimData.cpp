/*
    This source file is part of Rigs of Rods
    Copyright 2005-2012 Pierre-Michel Ricordel
    Copyright 2007-2012 Thomas Fischer
    Copyright 2013-2023 Petr Ohlidal

    For more information, see http://www.rigsofrods.org/

    Rigs of Rods is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3, as
    published by the Free Software Foundation.

    Rigs of Rods is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Rigs of Rods. If not, see <http://www.gnu.org/licenses/>.
*/

#include "SimData.h"

#include "Actor.h"
#include "CacheSystem.h"
#include "TuneupFileFormat.h"

using namespace RoR;

ActorSpawnRequest::ActorSpawnRequest()
{
    // Constructs `CacheEntryPtr` - doesn't compile without `#include CacheSystem.h` - not pretty if in header (even if auto-generated by C++).
    // Also `TuneupDefPtr` which needs `#include TuneupFileFormat.h`
}

ActorSpawnRequest::~ActorSpawnRequest()
{
    // Destructs `CacheEntryPtr` - doesn't compile without `#include CacheSystem.h` - not pretty if in header (even if auto-generated by C++).
    // Also `TuneupDefPtr` which needs `#include TuneupFileFormat.h`
}

beam_t::beam_t()
{
    // Constructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

beam_t::~beam_t()
{
    // Destructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

rope_t::rope_t()
{
    // Constructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

rope_t::~rope_t()
{
    // Destructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

tie_t::tie_t()
{
    // Constructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
    
    // Bitfields cannot be initialized in-class (C++ limitation).
    ti_no_self_lock = false;
    ti_tied = false;
    ti_tying = false;
}

tie_t::~tie_t()
{
    // Destructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

hook_t::hook_t()
{
    // Constructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

hook_t::~hook_t()
{
    // Destructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

soundsource_t::soundsource_t()
{
    // Constructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

soundsource_t::~soundsource_t()
{
    // Destructs `ActorPtr` - doesn't compile without `#include Actor.h` - not pretty if in header (even if auto-generated by C++).
}

ActorModifyRequest::ActorModifyRequest()
{
    // Constructs `CacheEntryPtr` which is a `RefCountingObjectPtr<>` so it doesn't compile without `#include "TuneupFileFormat.h"` and thus should not be in header.
}

ActorModifyRequest::~ActorModifyRequest()
{
    // Destructs `CacheEntryPtr` which is a `RefCountingObjectPtr<>` so it doesn't compile without `#include "TuneupFileFormat.h"` and thus should not be in header.
}

const char* RoR::ActorSimAttrToString(ActorSimAttr attr)
{
    switch (attr)
    {
    case ACTORSIMATTR_NONE: return "NONE";

    // TractionControl
    case ACTORSIMATTR_TC_RATIO: return "TC_RATIO";
    case ACTORSIMATTR_TC_PULSE_TIME: return "TC_PULSE_TIME";
    case ACTORSIMATTR_TC_WHEELSLIP_CONSTANT: return "TC_WHEELSLIP_CONSTANT";

    // Engine
    case ACTORSIMATTR_ENGINE_SHIFTDOWN_RPM:              return "ENGINE_SHIFTDOWN_RPM";
    case ACTORSIMATTR_ENGINE_SHIFTUP_RPM:                return "ENGINE_SHIFTUP_RPM";
    case ACTORSIMATTR_ENGINE_TORQUE:                     return "ENGINE_TORQUE";
    case ACTORSIMATTR_ENGINE_DIFF_RATIO:                 return "ENGINE_DIFF_RATIO";
    case ACTORSIMATTR_ENGINE_GEAR_RATIOS_ARRAY:          return "ENGINE_GEAR_RATIOS_ARRAY";

    // Engoption
    case ACTORSIMATTR_ENGOPTION_ENGINE_INERTIA:          return "ENGOPTION_ENGINE_INERTIA";
    case ACTORSIMATTR_ENGOPTION_ENGINE_TYPE:             return "ENGOPTION_ENGINE_TYPE";
    case ACTORSIMATTR_ENGOPTION_CLUTCH_FORCE:            return "ENGOPTION_CLUTCH_FORCE";
    case ACTORSIMATTR_ENGOPTION_SHIFT_TIME:              return "ENGOPTION_SHIFT_TIME";
    case ACTORSIMATTR_ENGOPTION_CLUTCH_TIME:             return "ENGOPTION_CLUTCH_TIME";
    case ACTORSIMATTR_ENGOPTION_POST_SHIFT_TIME:         return "ENGOPTION_POST_SHIFT_TIME";
    case ACTORSIMATTR_ENGOPTION_STALL_RPM:               return "ENGOPTION_STALL_RPM";           
    case ACTORSIMATTR_ENGOPTION_IDLE_RPM:                return "ENGOPTION_IDLE_RPM";            
    case ACTORSIMATTR_ENGOPTION_MAX_IDLE_MIXTURE:        return "ENGOPTION_MAX_IDLE_MIXTURE";    
    case ACTORSIMATTR_ENGOPTION_MIN_IDLE_MIXTURE:        return "ENGOPTION_MIN_IDLE_MIXTURE";    
    case ACTORSIMATTR_ENGOPTION_BRAKING_TORQUE:          return "ENGOPTION_BRAKING_TORQUE";      

    // Engturbo2 (actually 'engturbo' with type=2) 
    case ACTORSIMATTR_ENGTURBO2_INERTIA_FACTOR:          return "ENGTURBO2_INERTIA_FACTOR";      
    case ACTORSIMATTR_ENGTURBO2_NUM_TURBOS:              return "ENGTURBO2_NUM_TURBOS";          
    case ACTORSIMATTR_ENGTURBO2_MAX_RPM:                 return "ENGTURBO2_MAX_RPM";             
    case ACTORSIMATTR_ENGTURBO2_ENGINE_RPM_OP:           return "ENGTURBO2_ENGINE_RPM_OP";       
    case ACTORSIMATTR_ENGTURBO2_BOV_ENABLED:             return "ENGTURBO2_BOV_ENABLED";         
    case ACTORSIMATTR_ENGTURBO2_BOV_MIN_PSI:             return "ENGTURBO2_BOV_MIN_PSI";         
    case ACTORSIMATTR_ENGTURBO2_WASTEGATE_ENABLED:       return "ENGTURBO2_WASTEGATE_ENABLED";   
    case ACTORSIMATTR_ENGTURBO2_WASTEGATE_MAX_PSI:       return "ENGTURBO2_WASTEGATE_MAX_PSI";   
    case ACTORSIMATTR_ENGTURBO2_WASTEGATE_THRESHOLD_N:     return "ENGTURBO2_WASTEGATE_THRESHOLD_N";
    case ACTORSIMATTR_ENGTURBO2_WASTEGATE_THRESHOLD_P:     return "ENGTURBO2_WASTEGATE_THRESHOLD_P";
    case ACTORSIMATTR_ENGTURBO2_ANTILAG_ENABLED:         return "ENGTURBO2_ANTILAG_ENABLED";     
    case ACTORSIMATTR_ENGTURBO2_ANTILAG_CHANCE:          return "ENGTURBO2_ANTILAG_CHANCE";      
    case ACTORSIMATTR_ENGTURBO2_ANTILAG_MIN_RPM:         return "ENGTURBO2_ANTILAG_MIN_RPM";     
    case ACTORSIMATTR_ENGTURBO2_ANTILAG_POWER:           return "ENGTURBO2_ANTILAG_POWER";       

    default: return "";
    }
}
